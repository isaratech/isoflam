--- src/components/ItemControls/NodeControls/NodeSettings/NodeSettings.tsx	(revision Before)
+++ src/components/ItemControls/NodeControls/NodeSettings/NodeSettings.tsx	(revision After)
@@ -77,26 +77,54 @@
         </Section>
       )}
       <Section title={t('Icon scale')}>
-        <Slider
-          marks
-          step={0.1}
-          min={0.1}
-          max={5}
-          value={node.scaleFactor ?? 1}
-          onChange={(e, newScale) => {
-            const scaleFactor = newScale as number;
-            // Calculate proportional label height based on scale factor
-            // Use the default label height (80) as base and multiply by scale factor
-            const baseLabelHeight = 80;
-            const adjustedLabelHeight = Math.round(
-              baseLabelHeight * scaleFactor
-            );
-            onViewItemUpdated({
-              scaleFactor,
-              labelHeight: adjustedLabelHeight
-            });
-          }}
-        />
+        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
+          <Box sx={{ flexGrow: 1 }}>
+            <Slider
+              marks
+              step={0.1}
+              min={0.1}
+              max={10}
+              value={node.scaleFactor ?? 1}
+              onChange={(e, newScale) => {
+                const scaleFactor = newScale as number;
+                // Calculate proportional label height based on scale factor
+                // Use the default label height (80) as base and multiply by scale factor
+                const baseLabelHeight = 80;
+                const adjustedLabelHeight = Math.round(
+                  baseLabelHeight * scaleFactor
+                );
+                onViewItemUpdated({
+                  scaleFactor,
+                  labelHeight: adjustedLabelHeight
+                });
+              }}
+            />
+          </Box>
+          <TextField
+            type="number"
+            inputProps={{
+              min: 0.1,
+              max: 10,
+              step: 0.1
+            }}
+            value={node.scaleFactor ?? 1}
+            onChange={(e) => {
+              const value = parseFloat(e.target.value);
+              if (!Number.isNaN(value) && value >= 0.1 && value <= 10) {
+                const scaleFactor = value;
+                const baseLabelHeight = 80;
+                const adjustedLabelHeight = Math.round(
+                  baseLabelHeight * scaleFactor
+                );
+                onViewItemUpdated({
+                  scaleFactor,
+                  labelHeight: adjustedLabelHeight
+                });
+              }
+            }}
+            sx={{ width: '80px' }}
+          />
+        </Box>
       </Section>
       <Section title={t('Mirroring')}>
         <ToggleButtonGroup
