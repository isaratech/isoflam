--- src/hooks/useIconCategories.ts	(revision Before)
+++ src/hooks/useIconCategories.ts	(revision After)
@@ -13,11 +13,42 @@
 
   const iconCategories = useMemo<IconCollectionStateWithIcons[]>(() => {
     return iconCategoriesState.map((collection) => {
+      // Get all icons for this collection
+      const collectionIcons = icons.filter((icon) => {
+        return icon.collection === collection.id;
+      });
+      
+      // Group icons by subcategory
+      const subcategoriesMap = new Map<string, typeof icons>();
+      
+      // Find icons with subcategories
+      collectionIcons.forEach((icon) => {
+        if (icon.subcategory) {
+          if (!subcategoriesMap.has(icon.subcategory)) {
+            subcategoriesMap.set(icon.subcategory, []);
+          }
+          subcategoriesMap.get(icon.subcategory)?.push(icon);
+        }
+      });
+      
+      // Create subcategories array
+      const subcategories = Array.from(subcategoriesMap.entries()).map(([id, subcategoryIcons]) => {
+        // Find subcategory state or use default
+        const subcategoryState = collection.subcategories?.find(s => s.id === id) || { id, isExpanded: false };
+        
+        return {
+          ...subcategoryState,
+          icons: subcategoryIcons
+        };
+      });
+      
+      // Get icons without subcategory
+      const iconsWithoutSubcategory = collectionIcons.filter(icon => !icon.subcategory);
+      
       return {
         ...collection,
-        icons: icons.filter((icon) => {
-          return icon.collection === collection.id;
-        })
+        icons: iconsWithoutSubcategory,
+        subcategories: subcategories.length > 0 ? subcategories : undefined
       };
     });
   }, [icons, iconCategoriesState]);
